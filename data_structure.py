# -*- coding: utf-8 -*-
"""Data_Structure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17k5e_3rlBttB2hIqWBopIf7PLBRYNU20
"""

import warnings
warnings.filterwarnings('ignore')

S1='The truth is out there'
print(S1)

print('='*40)

L1=[1,3,5,7,8]
print(L1)

import time

cha=lambda x,y:x-y
cha(3,6)

print('tt')
time.sleep(8)
print('ww')

import sys
sys.path

import hello
hello.hi()
hello.bye()

import hello

hello.hi()

from myPKG.myLibrary import hi
hi()

class myClass:
  var_1='Hello Class'

  def func_1(self):
    print(self.var_1,'클래스 함수 실행')

obj=myClass()
obj.var_1

import numpy as np
a0=np.array(9)
print(a0)

np.random.seed(2045)

np.random.choice(np.arange(1,45))

!ls -l

import pandas as pd
DF1= pd.read_csv('PII.csv')

DF1

DF2 = pd.read_excel('PII.xlsx')

DF2

type(DF1)

type(DF2)

DF1.index

DF1.info()

DF1.mean()

DF1.describe()

type(DF1['Height'])

DF1[['Height','Age']]

DF1[['Height','Weight']].plot(kind='bar')

DF1[['Height','Weight']].plot(kind='scatter',x='Height',y='Weight',s=50)

DF1.BloodType.value_counts()

import matplotlib.pyplot as plt

plt.figure(figsize=(9,6))
plt.plot(DF1.Height)
plt.grid(True)
plt.show()

plt.bar(DF1.index,DF1.Height,width=0.3,color='g')
plt.show()

import seaborn as sns
sns.regplot(DF1.Height,DF1.Weight)
plt.show()

DF=sns.load_dataset('titanic')

DF.head(10)

DF.isnull().sum(axis=0)

DF['desk'].value.counts(dropna=False)

DF.dropna(thresh=300,axis=1).shape

DF=sns.load_dataset('titanic')

DF.shape

DF.dropna(subset=['age'],how='any',axis=0).shape

DF['age'].fillna(int(DF['age'].mean(axis=0)),inplace=True)

DF['age'].head(10)

DF.head()

titanic=sns.load_dataset('titanic')

DF=titanic.loc[:,['age','fare']].head(5)
DF

DF.apply(sum,axis=1)

Filter_1=(titanic.age>=10)&(titanic.age<20)

titanic.loc[Filter_1,:].head()

pd.merge(DF1,DF2)

import seaborn as sns
titanic=sns.load_dataset('titanic')

DF=titanic.loc[:, ['age','sex','class','fare','survived']]
DF.head()

grouped=DF.groupby(['class'])
grouped

for key in ['First','Second','Third']:
  print(grouped.get_group(key).head(3))
  print('\n')

grouped.mean()

grouped.get_group('Third').head(3)

grouped.get_group('Third').head(3)

grouped_TWO=DF.groupby(['class','sex'])
grouped_TWO

grouped.agg(['mean','std'])

