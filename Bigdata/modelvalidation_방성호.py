# -*- coding: utf-8 -*-
"""modelValidation_방성호.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pLs7v9MKz38TPjt5-szSaxLYAjaqR0jC
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
Model = pd.read_csv('https://raw.githubusercontent.com/rusita-ai/pyData/master/Model_Validation.csv')
Model.shape

Model.head()

sns.scatterplot(Model['Inputs'],Model['Outputs'])
plt.show()

sns.regplot(x= 'Inputs', y = 'Outputs',data=Model,
            line_kws= {'color':'red'},
            scatter_kws = {'edgecolor' : 'white'})
plt.xlim(-3,3)
plt.show()

sns.regplot(x='Inputs',y='Outputs',data=Elec,
            line_kws = {'color':'red'},
            scatter_kws = {'edgecolor':'white'})
sns.regplot(x='Inputs',y='Outputs',data=Elec,
            line_kws = {'color':'blue'},
            scatter_kws = {'edgecolor':'white'},
            order =2)
sns.regplot(x='Inputs',y='Outputs',data=Elec,
            line_kws = {'color':'green'},
            scatter_kws = {'edgecolor':'white'},
            order =5)
sns.regplot(x='Inputs',y='Outputs',data=Elec,
            line_kws = {'color':'orange'},
            scatter_kws = {'edgecolor':'white'},
            order =9)
plt.xlim(-3,3)
plt.ylim(-3,3)
plt.xticks(rotation=35)
plt.yticks(rotation=90)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
Model = pd.read_csv('https://raw.githubusercontent.com/rusita-ai/pyData/master/Model_Validation.csv')
Model.shape

from sklearn.model_selection import train_test_split

TR_Model, TE_Model = train_test_split(Elec, test_size=0.3, random_state=2045)

TR_Model.shape, TE_Model.shape

TR_Model.head()

TE_Model.head()

from sklearn.model_selection import train_test_split

Inputs_train, Inputs_test, Outputs_train, Outputs_test =train_test_split(Model[['Inputs']],Model['Outputs'],
                                                                         test_size=0.3,random_state=2045)
Inputs_train.shape, Outputs_train.shape, Inputs_test.shape,Outputs_test.shape

Inputs_train.head()

Outputs_train.head()

sns.scatterplot(TR_Model['Inputs'],TR_Model['Outputs'])
plt.show()

from sklearn.linear_model import LinearRegression

Model_7 = LinearRegression()
Model_7.fit(Inputs_train,Outputs_train)

y_hat_7 = Model_7.predict(Inputs_test)
y_hat_7.shape

from sklearn.metrics import mean_squared_error

TE_Err_7 = mean_squared_error(Outputs_test, y_hat_7)
TE_Err_7

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=5,include_bias=False)
PX_5_TR = poly.fit_transform(Inputs_train)

from sklearn.linear_model import LinearRegression

Model_5 = LinearRegression()
Model_5.fit(PX_5_TR,Outputs_train)

PX_5_TE = poly.fit_transform(Inputs_test)

y_hat_5 = Model_5.predict(PX_5_TE)

from sklearn.metrics import mean_squared_error

TE_Err_5 = mean_squared_error(Outputs_test,y_hat_5)
TE_Err_5



from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=9,include_bias=False)
PX_9_TR = poly.fit_transform(Inputs_train)

from sklearn.linear_model import LinearRegression

Model_9 = LinearRegression()
Model_9.fit(PX_9_TR,Outputs_train)

PX_9_TE = poly.fit_transform(Inputs_test)

y_hat_9 = Model_9.predict(PX_9_TE)

from sklearn.metrics import mean_squared_error

TE_Err_9 = mean_squared_error(Outputs_test,y_hat_9)
TE_Err_9

print('5차 모델:',TE_Err_5)
print('7차 모델:',TE_Err_7)
print('9차 모델:',TE_Err_9)



