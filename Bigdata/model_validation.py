# -*- coding: utf-8 -*-
"""Model_Validation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qUsN_EYi1Mn__Py56NwebcXfy17hyMwm
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

Elec = pd.read_csv('https://raw.githubusercontent.com/rusita-ai/pyData/master/Electric.csv')

Elec.info()

Elec.head()

sns.scatterplot(Elec['surface_area'],Elec['electricity'])
plt.show()

sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'red'},
            scatter_kws = {'edgecolor':'white'})
plt.xlim(505,820)
plt.show()

sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'blue'},
            scatter_kws = {'edgecolor':'white'},
            order =2)
plt.xlim(505,820)
plt.show()

sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'green'},
            scatter_kws = {'edgecolor':'white'},
            order =5)
plt.xlim(505,820)
plt.show()

sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'orange'},
            scatter_kws = {'edgecolor':'white'},
            order =9)
plt.xlim(505,820)
plt.ylim(50,450)
plt.show()

sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'red'},
            scatter_kws = {'edgecolor':'white'})
sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'blue'},
            scatter_kws = {'edgecolor':'white'},
            order =2)
sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'green'},
            scatter_kws = {'edgecolor':'white'},
            order =5)
sns.regplot(x='surface_area',y='electricity',data=Elec,
            line_kws = {'color':'orange'},
            scatter_kws = {'edgecolor':'white'},
            order =9)
plt.xlim(505,820)
plt.ylim(50,450)
plt.xticks(rotation=35)
plt.yticks(rotation=90)
plt.show()

import pandas as pd

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

Elec = pd.read_csv('https://raw.githubusercontent.com/rusita-ai/pyData/master/Electric.csv')

Elec.info()

X_train = Elec[['surface_area']]
y_train = Elec[['electricity']]

X_train.shape, y_train.shape

from sklearn.linear_model import LinearRegression

Model_1 = LinearRegression()
Model_1.fit(X_train, y_train)

print(Model_1.coef_)
print(Model_1.intercept_)

y_hat_1 = Model_1.predict(X_train)

len(y_hat_1)

TR_Err_1 = np.mean((y_train - y_hat_1)** 2)
TR_Err_1

from sklearn.preprocessing import PolynomialFeatures

poly  = PolynomialFeatures(degree = 5, include_bias =False)
PX_5 = poly.fit_transform(X_train)

PX_5

from sklearn.linear_model import LinearRegression

Model_5 = LinearRegression()
Model_5.fit(PX_5, y_train)

np.set_printoptions(suppress = True, precision= 10)

print(Model_5.coef_)
print(Model_5.intercept_)

PX_5_pred= poly.fit_transform(X_train)

y_hat_5 = Model_5.predict(PX_5_pred)

y_hat_5.shape

TR_Err_5 = np.mean((y_train - y_hat_5)** 2)
TR_Err_5

from sklearn.preprocessing import PolynomialFeatures

poly= PolynomialFeatures(degree=9, include_bias=False)
PX_9= poly.fit_transform(X_train)

X_train.shape,PX_9.shape

from sklearn.linear_model import LinearRegression

Model_9 = LinearRegression()
Model_9.fit(PX_9, y_train)

print(Model_9.coef_)
print(Model_9.intercept_)

PX_9_pred= poly.fit_transform(X_train)

y_hat_9 = Model_9.predict(PX_9_pred)

y_hat_9.shape

TR_Err_9 = np.mean((y_train - y_hat_9)** 2)
TR_Err_9

print('1차 모델:',TR_Err_1)
print('5차 모델:',TR_Err_5)
print('9차 모델:',TR_Err_9)

sns.residplot(x = 'surface_area',
              y = 'electricity',
              data = Elec,
              order = 1,
              scatter_kws = {'edgecolor' : 'white'})
plt.ylim(-300,300)
plt.show()

from sklearn.model_selection import train_test_split

TR_Elec, TE_Elec = train_test_split(Elec, test_size = 0.2, random_state= 2045)

TR_Elec.shape,TE_Elec.shape

TR_Elec.head()

TE_Elec.head()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

Elec = pd.read_csv('https://raw.githubusercontent.com/rusita-ai/pyData/master/Electric.csv')

Elec.info()

from sklearn.model_selection import train_test_split
TR_Elec, TE_Elec= train_test_split(Elec, test_size = 0.2, random_state=2045)

TR_Elec.shape, TE_Elec.shape

TR_Elec.head()

TE_Elec.head()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(Elec[['surface_area']],Elec['electricity'],
                                                 test_size=0.2,random_state=2045)

X_train.shape, y_train.shape, X_test.shape, y_test.shape

X_train.head()

y_train.head()

sns.scatterplot(TR_Elec['surface_area'],TR_Elec['electricity'])
plt.show()

sns.scatterplot(TE_Elec['surface_area'],TE_Elec['electricity'])
plt.show()

from sklearn.linear_model import LinearRegression

Model_1 = LinearRegression()
Model_1.fit(X_train,y_train)

y_hat_1 = Model_1.predict(X_test)
y_hat_1.shape

from sklearn.metrics import mean_squared_error
TE_Err_1 = mean_squared_error(y_test,y_hat_1)
TE_Err_1

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=5,include_bias=False)
PX_5_TR = poly.fit_transform(X_train)

from sklearn.linear_model import LinearRegression

Model_5 =LinearRegression()
Model_5.fit(PX_5_TR,y_train)

PX_5_TE = poly.fit_transform(X_test)

y_hat_5 = Model_5.predict(PX_5_TE)

from sklearn.metrics import mean_squared_error

TE_Err_5 = mean_squared_error(y_test,y_hat_5)
TE_Err_5

